document()
load_all()
plot_sur(model.fit,x = c(0, 0.5, 1))
load_all()
document()
load_all()
plot_sur(model.fit,x = c(0, 0.5, 1))
plot_sur(model.fit,x = c(0, 0.5, 1))
plot_hz(model.fit,x = c(0, 0.5, 1))
document()
load_all()
plot_hz(model.fit,x = c(0, 0.5, 1))
plot_hz(model.fit,x = c(0, 0.5, -1))
plot_hz(model.fit,x = c(0, 0.5, -2))
plot_hz(model.fit,x = c(0, 0.5, -5))
plot_hz(model.fit,x = c(0, 0.5, 2))
plot_hz(model.fit,x = c(0, 0.5, 5))
plot_hz(model.fit,x = c(0, 1, 5))
plot_hz(model.fit,x = c(3, 1, 5))
plot_hz(model.fit,x = c(0, 0, 0))
plot_hz(model.fit,x = c(0, 1, 0))
plot_hz(model.fit,x = c(0, 4, 0))
plot_hz(model.fit,x = c(0, 1, 0.5))
plot_hz(model.fit,x = c(0, 0, 0.5))
document()
load_all()
plot_hz(model.fit,x = c(0, 0, 0.5))
document()
load_all()
plot_hz(model.fit,x = c(0, 0, 0.5))
plot_hz(model.fit,x = c(0, 0, 0))
plot_hz(model.fit,x = c(0, 0, 3))
plot_hz(model.fit,x = c(0, 0.5, 1))
plot_hz(model.fit,x = c(0, 0, 0))
plot_hz(model.fit,x = c(1, 0, 0))
plot_hz(model.fit,x = c(0, 0, 0))
plot_hz(model.fit,x = c(1, 0, 0))
plot_hz(model.fit,x = c(5, 0, 0))
plot_hz(model.fit,x = c(1, 0, 0))
plot_hz(model.fit,x = c(0, 0, 0))
plot_hz(model.fit,x = c(0, 2, 0))
plot_hz(model.fit,x = c(0, 2, 1))
plot_hz(model.fit,x = c(0, 2, 0))
plot_hz(model.fit,x = c(0, 0, 0))
plot_sur(model.fit,x = c(0, 0, 0))
plot_sur(model.fit,x = c(0, 2, 0))
plot_hz(model.fit,x = c(0, 2, 0))
document()
load_all()
plot_sur(model.fit,x = c(0, 2, 0))
fit = model.fit
x = c(0, 2, 0)
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
S_vals <- exp(-H0(t_grid%*%const, fit$theta, fit$basis_params))
H_vals <-  H0(t_grid%*%const, fit$theta, fit$basis_params)
variance_H <- diag(compute_cumu_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const))
se_S <- S_vals^2 * variance_H
lty_ <- colors <- c("Survival" = 1, "95% ASY.CI"=2)
colors <- c("Survival" = "red", "95% ASY.CI"="grey30")
fills <- c("Survival" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0.05)) +
scale_y_continuous(breaks = seq(0, max(S_vals), round(max(S_vals)/5, 1)),limits = c(0, max(S_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Survival for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.8, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
suppressWarnings(print(p))
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
S_vals <- exp(-H0(t_grid%*%const, fit$theta, fit$basis_params))
H_vals <-  H0(t_grid%*%const, fit$theta, fit$basis_params)
variance_H <- diag(compute_cumu_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const))
se_S <- S_vals^2 * variance_H
lty_ <- colors <- c("Survival" = 1, "95% ASY.CI"=2)
colors <- c("Survival" = "red", "95% ASY.CI"="grey30")
fills <- c("Survival" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0.05)) +
scale_y_continuous(breaks = seq(0, max(S_vals), round(max(S_vals)/5, 1)),limits = c(0, max(S_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Survival for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.8, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
plot_sur <- function(fit, x = NULL){
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
S_vals <- exp(-H0(t_grid%*%const, fit$theta, fit$basis_params))
H_vals <-  H0(t_grid%*%const, fit$theta, fit$basis_params)
variance_H <- diag(compute_cumu_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const))
se_S <- S_vals^2 * variance_H
lty_ <- colors <- c("Survival" = 1, "95% ASY.CI"=2)
colors <- c("Survival" = "red", "95% ASY.CI"="grey30")
fills <- c("Survival" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0.05)) +
scale_y_continuous(breaks = seq(0, max(S_vals), round(max(S_vals)/5, 1)), limits = c(0, max(S_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Survival for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.8, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
p
p
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
S_vals <- exp(-H0(t_grid%*%const, fit$theta, fit$basis_params))
H_vals <-  H0(t_grid%*%const, fit$theta, fit$basis_params)
variance_H <- diag(compute_cumu_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const))
se_S <- S_vals^2 * variance_H
lty_ <- colors <- c("Survival" = 1, "95% ASY.CI"=2)
colors <- c("Survival" = "red", "95% ASY.CI"="grey30")
fills <- c("Survival" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0.05)) +
scale_y_continuous(breaks = seq(0, max(S_vals), round(max(S_vals)/5, 1)), limits = c(0, max(S_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Survival for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.8, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
p
ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0.05))
ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0))
ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, max(S_vals), round(max(S_vals)/5, 1)), limits = c(0, max(S_vals)), expand = c(0, 0))
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
S_vals <- exp(-H0(t_grid%*%const, fit$theta, fit$basis_params))
H_vals <-  H0(t_grid%*%const, fit$theta, fit$basis_params)
variance_H <- diag(compute_cumu_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const))
se_S <- S_vals^2 * variance_H
lty_ <- colors <- c("Survival" = 1, "95% ASY.CI"=2)
colors <- c("Survival" = "red", "95% ASY.CI"="grey30")
fills <- c("Survival" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(0, max_event_t, round(max(t_grid)/5, 1)), limits = c(0, max_event_t), expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, max(S_vals), round(max(S_vals)/5, 1)), limits = c(0, max(S_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Survival for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.8, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
p
document()
load_all()
plot_hz(fit = model.fit,x = c(0, 2, 0))
plot_sur(fit = model.fit,x = c(0, 2, 0))
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
h_vals <- h0(t_grid%*%const, fit$theta, fit$basis_params)*c(const)
quantile(h_vals)
quantile(h_vals, seq(0, 1, by = 5))
max(h_vals)
quantile(0, max(h_vals))
quantile(c(0, max(h_vals)))
round(quantile(c(0, max(h_vals))))
round(max(h_vals)/5, 1)
round(max(h_vals)/5, ifelse(max(h_vals)>1, 0, 1))
round(max(h_vals)/5, ifelse(max(h_vals)>=3, 0, 1))
round(max_event_t/5, ifelse(max_event_t>=3, 0, 1))
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
h_vals <- h0(t_grid%*%const, fit$theta, fit$basis_params)*c(const)
asy_h_sd <- sqrt(diag(compute_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const)))
lty_ <- colors <- c("Hazard" = 1, "95% ASY.CI"=2)
colors <- c("Hazard" = "red", "95% ASY.CI"="grey30")
fills <- c("Hazard" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = h_vals, col = "Hazard", lty = "Hazard")) +
geom_line(aes(x, y  = h_vals + 1.96*asy_h_sd, col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = h_vals - 1.96*asy_h_sd, col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(h_vals)))
geom_ribbon(aes(x = x, ymin = pmax(h_vals - 1.96*asy_h_sd, 0),ymax = pmin(h_vals + 1.96*asy_h_sd, max(h_vals))),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Hazard Rate") +
scale_x_continuous(breaks = seq(0, max_event_t,round(max_event_t/5, ifelse(max_event_t>=3, 0, 1))),limits = c(0, max_event_t), expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, max(h_vals), round(max(h_vals)/5, ifelse(max(h_vals)>=3, 0, 1))),limits = c(0, max(h_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Hazard for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.2, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
p
round(max_event_t/5, ifelse(max_event_t>=3, 0, 1))
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
h_vals <- h0(t_grid%*%const, fit$theta, fit$basis_params)*c(const)
asy_h_sd <- sqrt(diag(compute_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const)))
lty_ <- colors <- c("Hazard" = 1, "95% ASY.CI"=2)
colors <- c("Hazard" = "red", "95% ASY.CI"="grey30")
fills <- c("Hazard" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = h_vals, col = "Hazard", lty = "Hazard")) +
geom_line(aes(x, y  = h_vals + 1.96*asy_h_sd, col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = h_vals - 1.96*asy_h_sd, col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(h_vals)))
geom_ribbon(aes(x = x, ymin = pmax(h_vals - 1.96*asy_h_sd, 0),ymax = pmin(h_vals + 1.96*asy_h_sd, max(h_vals))),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Hazard Rate") +
scale_x_continuous(breaks = seq(round(max_event_t/5, ifelse(max_event_t>=3, 0, 1)),
max_event_t,round(max_event_t/5, ifelse(max_event_t>=3, 0, 1))),limits = c(0, max_event_t), expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, max(h_vals), round(max(h_vals)/5, ifelse(max(h_vals)>=3, 0, 1))),limits = c(0, max(h_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Hazard for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.2, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
p
X_base <-  if(is.null(x)){
rep(0, length(fit$beta))
}else{x}
const <- exp(-X_base%*%fit$beta)
max_event_t <- max(fit$k[fit$delta==1]* c(exp(X_base%*%fit$beta)))
t_grid <- seq(0, max_event_t, 0.01)
S_vals <- exp(-H0(t_grid%*%const, fit$theta, fit$basis_params))
H_vals <-  H0(t_grid%*%const, fit$theta, fit$basis_params)
variance_H <- diag(compute_cumu_hazard_covariance(fit, compute_covariance_matrix(fit,return_F = T), t_grid%*%const))
se_S <- S_vals^2 * variance_H
lty_ <- colors <- c("Survival" = 1, "95% ASY.CI"=2)
colors <- c("Survival" = "red", "95% ASY.CI"="grey30")
fills <- c("Survival" = "red", "95% ASY.CI"="grey30")
p <- ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = S_vals, col = "Survival", lty = "Survival")) +
geom_line(aes(x, y  = S_vals + 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = S_vals - 1.96*sqrt(se_S), col = "95% ASY.CI", lty = "95% ASY.CI")) +
# coord_cartesian(ylim = c(0, max(S_vals)))
geom_ribbon(aes(x = x, ymin = pmax(S_vals - 1.96*sqrt(se_S), 0),ymax = pmin(S_vals + 1.96*sqrt(se_S), 1)),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up time t") + ylab("Survival Prob.") +
scale_x_continuous(breaks = seq(round(max_event_t/5, ifelse(max_event_t>=3, 0, 1)),
max_event_t,round(max_event_t/5, ifelse(max_event_t>=3, 0, 1))), limits = c(0, max_event_t), expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, max(S_vals), round(max(S_vals)/5, 1)), limits = c(0, max(S_vals)), expand = c(0, 0)) +
# labs(title = "Baseline Survival for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.8, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
p
document()
load_all()
plot_sur(fit = model.fit,x = c(0, 2, 0))
plot_sur(fit = model.fit,x = c(0, 2, 0))
plot_sur(fit = model.fit,x = c(0, 3, 0))
plot_hz(fit = model.fit,x = c(0, 3, 0))
plot_hz(fit = model.fit,x = c(0, 2, 0))
plot_sur(fit = model.fit,x = c(0, 2, 0))
plot_hz(fit = model.fit,x = c(0, 2, 0))
plot_hz(fit = model.fit,x = c(0, 5, 0))
plot_hz(fit = model.fit,x = c(0, 0, 0))
oduc
document()
load_all()
plot_sur(model.fit,x = c(0, 0.5, 1))
plot_hz(fit = model.fit,x = c(0, 0, 0))
check()
document()
load_all()
check()
install(build_vignettes = TRUE)
ptces <- ptces %>% mutate(y_L = ifelse(y_L==0, NA, y_L), y_R = ifelse(y_R==0, NA, y_R))
save(ptces, "data/ptces.rda")
save(ptces, file = "data/ptces.rda")
document()
load_all()
data("ptces")
ptces
print(ptces,n =100)
data("ptces")
ptces
document()
load_all()
check()
install(build_vignettes = TRUE)
library()
library(devtools)
document()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
document()
document()
load_all()
check()
check()
document()
load_all()
check()
document()
load_all()
document()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
install(build_vignettes = TRUE)
library()
library(devtools)
document()
load_all()
check()
install(build_vignettes = TRUE)
library(devtools)
document()
load_all()
check()
install(build_vignettes = TRUE)
library()
library(devtools)
document()
load_all()
chec()
check()
document()
load_all()
check()
install(build_vignettes = TRUE)
use_readme_rmd()
library(aftQnP)
require(survival)
# load data
data("ptces")
# create Surv object
formula_aft <- Surv(y_L, y_R, type = "interval2") ~ X1 + X2 + X3 - 1
# fit model
model.fit <- aftsur(formula = formula_aft, cure_var = ~ Z1 + Z2 + Z3, offset = TRUE, data = ptces)
plot_sur(fit = model.fit, x = c(0.5, 2,0))
plot_sur(fit = model.fit, x = c(0.5, 2,-1))
plot_hz(fit = model.fit, x = c(0.5, 2,-1))
plot_hz(fit = model.fit, x = c(0.5, 2,1))
plot_hz(fit = model.fit, x = c(0.5, 2, -0.5))
plot_sur(fit = model.fit, x = c(0.5, 2, -0.5))
library(aftQnP)
document()
load_all()
check()
install(build_vignettes = TRUE)
library(devtools)
document()
load_all()
check()
install(build_vignettes = TRUE)
library(devtools)
document()
load_all()
check()
install(build_vignettes = TRUE)
h0
h0()
library(aftQnP)
library(aftgee)
detach("package:aftgee", unload = TRUE)
library(aftQnP)
require(survival)
data("ptces")
force(ptces)
formula_aft <- Surv(y_L, y_R, type = "interval2") ~ X1 + X2 + X3 - 1
formula_aft <- Surv(y_L, y_R, type = "interval2") ~ X1 + X2 + X3 - 1
formula_aft
model.fit <- aftsur(formula = formula_aft, cure_var = ~ Z1 + Z2 + Z3, offset = TRUE, data = ptces)
model.fit$X
model.fit$X
View(model.fit)
ptces
model.fit$Z
model.fit$delta
model.fit$beta
model.fit$lambda
model.fit$basis_params
model.fit$k
model.fit$num_knots
model.fit$pi
model.fit$predicth
model.fit$R_matrix
model.fit$S
